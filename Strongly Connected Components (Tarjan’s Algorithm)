#include<bits/stdc++.h>

class Graph{
    public:
    int v;
    map<int,vector<int>> adj;
    //Graph getTranspose(map<int,vector<int>> adj,int n);
};

Graph getTranspose(map<int,vector<int>> adj,int n){
    Graph gr;
    for(int i=0;i<n;i++){
        for(auto j:adj[i]){
            gr.adj[j].push_back(i);
        }
    }
    return gr;
}

void fillStack(int a,map<int,vector<int>> adj,stack<int> &s,vector<bool> &vis){
    vis[a]=1;
    for(auto i:adj[a]){
        if(!vis[i])fillStack(i,adj,s,vis);
    }
    s.push(a);
}

void DFSutil(Graph g,int v,vector<bool> &vis,vector<int> &temp){
    vis[v]=1;
    temp.push_back(v);
    for(auto i:g.adj[v])if(!vis[i])DFSutil(g,i,vis,temp);
}

vector<vector<int>> stronglyConnectedComponents(int n, vector<vector<int>> &edges)
{
    // Write your code here.
    map<int,vector<int>> adj;
    int N=edges.size();
    for(int i=0;i<edges.size();i++){
        adj[edges[i][0]].push_back(edges[i][1]);
    }
    stack<int> s;
    vector<vector<int>> ans;
    vector<int> temp;
    
    vector<bool> vis(n,false);
    
    for(int i=0;i<n;i++){
        if(!vis[i])fillStack(i,adj,s,vis);
    }
    
    Graph g = getTranspose(adj,N);
    
    for(int i=0;i<n;i++)vis[i]=false;
    
    while(!s.empty()){
        int v=s.top();
        s.pop();
        
        if(!vis[v]){
            DFSutil(g,v,vis,temp);
            ans.push_back(temp);
            temp.clear();
        }
    }
    return ans;
}
